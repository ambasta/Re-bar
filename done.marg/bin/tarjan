#!/usr/bin/env python

import csv
import pprint

import tkinter
from tkinter import filedialog

from collections import namedtuple


TarjanContext = namedtuple(
    'TarjanContext', [
        'g',
        'S',
        'S_set',
        'index',
        'lowlink',
        'T',
        'ret'])


def _tarjan_head(context, vertex):
    context.index[vertex] = len(context.index)
    context.lowlink[vertex] = context.index[vertex]
    context.S.append(vertex)
    context.S_set.add(vertex)
    iterator = iter(context.g.get(vertex, ()))
    context.T.append((iterator, False, vertex, None))


def _tarjan_body(context, iterator, vertex):
    for ctx in iterator:
        if ctx not in context.index:
            context.T.append((iterator, True, vertex, ctx))
            _tarjan_head(context, ctx)
            return

        if ctx in context.S_set:
            context.lowlink[vertex] = min(
                context.lowlink[vertex], context.index[ctx])

    if context.lowlink[vertex] == context.index[vertex]:
            scc = []
            ctx = None
            while vertex != ctx:
                    ctx = context.S.pop()
                    scc.append(ctx)
                    context.S_set.remove(ctx)
            context.ret.append(scc)


def tarjan(g):
    context = TarjanContext(
        g=g, S=[], S_set=set(), index={},
        lowlink={}, T=[], ret=[])
    iterator = iter(g)

    while True:
        try:
            vertex = next(iterator)
        except StopIteration:
            return context.ret

        if vertex not in context.index:
            _tarjan_head(context, vertex)

        while context.T:
            it, inside, vertex, ctx = context.T.pop()

            if inside:
                context.lowlink[vertex] = min(
                    context.lowlink[ctx], context.lowlink[vertex])
            _tarjan_body(context, it, vertex)


if __name__ == '__main__':
    window = tkinter.Tk()
    window.withdraw()

    path = filedialog.askopenfilename()

    source = open(path, 'r')
    reader = csv.reader(source)

    graph = {}

    for index, row in enumerate(reader):
        if index:
            source = row[0]
            destination = row[1]
            if source in graph:
                graph[source].append(destination)
            else:
                graph[source] = [destination]

    pprint.pprint(tarjan(graph))
